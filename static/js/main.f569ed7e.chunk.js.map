{"version":3,"sources":["assets/images/solaire.png","assets/images/bastion.png","Pages/HomePage/HomePage.jsx","Pages/HomePage/index.js","Pages/Page1/Page1.jsx","Pages/Page1/index.js","Pages/Page2/Page2.jsx","Pages/Page2/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","HomePage","src","className","alt","Page1","solaire","Page2","bastion","App","useState","showSidebar","setShowSidebar","style","animationName","z-index","onClick","viewBox","width","height","rx","y","to","textDecoration","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,2PCc5BC,ICZAC,EDAf,WACE,OACE,6BACE,yBACEC,IAAI,uGACJC,UAAU,YACVC,IAAI,W,uBEIGC,ICVAA,EDEf,WACE,OACE,6BACE,yBAAKH,IAAKI,IAASH,UAAU,UAAUC,IAAI,c,uBEKlCG,ICVAA,EDEf,WACE,OACE,6BACE,yBAAKL,IAAKM,IAASL,UAAU,UAAUC,IAAI,cEuDlCK,MAzDf,WAAgB,IAAD,EACyBC,qBADzB,mBACNC,EADM,KACOC,EADP,KAEb,OACE,yBAAKT,UAAU,OACb,yBACEA,UAAU,UACVU,MAAO,CACLC,cAAeH,KAGnB,kBAAC,IAAD,KACE,yBAAKR,UAAU,qBACb,yBACEA,UAAU,eACVY,UAAQ,KACRC,QAAS,kBAEHJ,EADY,iBAAhBD,EACmB,gBACA,iBAErBM,QAAQ,aACRC,MAAM,KACNC,OAAO,MAEP,0BAAMD,MAAM,MAAMC,OAAO,KAAKC,GAAG,MACjC,0BAAMC,EAAE,KAAKH,MAAM,MAAMC,OAAO,KAAKC,GAAG,MACxC,0BAAMC,EAAE,KAAKH,MAAM,MAAMC,OAAO,KAAKC,GAAG,OAE1C,yBAAKjB,UAAU,WACb,kBAAC,IAAD,CAAMmB,GAAG,IAAIT,MAAO,CAAEU,eAAgB,SACpC,yBAAKpB,UAAU,iBAAf,gBAEF,kBAAC,IAAD,CAAMmB,GAAG,SAAST,MAAO,CAAEU,eAAgB,SACzC,yBAAKpB,UAAU,iBAAf,aACM,IACR,kBAAC,IAAD,CAAMmB,GAAG,SAAST,MAAO,CAAEU,eAAgB,SACzC,yBAAKpB,UAAU,iBAAf,UACM,MAIZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WC1CQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f569ed7e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/solaire.435a762b.png\";","module.exports = __webpack_public_path__ + \"static/media/bastion.037d371b.png\";","import React from \"react\";\r\nimport \"./HomePage.css\";\r\nfunction Home() {\r\n  return (\r\n    <div>\r\n      <img\r\n        src='https://psmedia.playstation.com/is/image/psmedia/furi-two-column-01-ps4-eu-26oct15?$TwoColumn_Image$'\r\n        className='Furi-logo'\r\n        alt='logo'\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import HomePage from \"./HomePage\";\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport solaire from \"../../assets/images/solaire.png\";\r\nimport \"./Page1.css\";\r\n\r\nfunction Page1() {\r\n  return (\r\n    <div>\r\n      <img src={solaire} className='solaire' alt='solaire' />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page1;\r\n","import Page1 from \"./Page1\";\r\n\r\nexport default Page1;\r\n","import React from \"react\";\r\nimport bastion from \"../../assets/images/bastion.png\";\r\nimport \"./Page2.css\";\r\n\r\nfunction Page2() {\r\n  return (\r\n    <div>\r\n      <img src={bastion} className='bastion' alt='bastion' />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Page2;\r\n","import Page2 from \"./Page2\";\r\n\r\nexport default Page2;\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport { HomePage, Page1, Page2 } from \"./Pages\";\r\n\r\nfunction App() {\r\n  const [showSidebar, setShowSidebar] = useState();\r\n  return (\r\n    <div className='App'>\r\n      <div\r\n        className='Sidebar'\r\n        style={{\r\n          animationName: showSidebar,\r\n        }}\r\n      />\r\n      <Router>\r\n        <nav className='App-nav-container'>\r\n          <svg\r\n            className='App-nav-menu'\r\n            z-index='10'\r\n            onClick={() =>\r\n              showSidebar === \"sidebar-open\"\r\n                ? setShowSidebar(\"sidebar-close\")\r\n                : setShowSidebar(\"sidebar-open\")\r\n            }\r\n            viewBox='0 0 100 80'\r\n            width='40'\r\n            height='40'\r\n          >\r\n            <rect width='100' height='20' rx='8'></rect>\r\n            <rect y='30' width='100' height='20' rx='8'></rect>\r\n            <rect y='60' width='100' height='20' rx='8'></rect>\r\n          </svg>\r\n          <div className='App-nav'>\r\n            <Link to='/' style={{ textDecoration: \"none\" }}>\r\n              <div className='App-nav--item'>Farhad Khan</div>\r\n            </Link>\r\n            <Link to='/page1' style={{ textDecoration: \"none\" }}>\r\n              <div className='App-nav--item'>Projects</div>\r\n            </Link>{\" \"}\r\n            <Link to='/page2' style={{ textDecoration: \"none\" }}>\r\n              <div className='App-nav--item'>About</div>\r\n            </Link>{\" \"}\r\n          </div>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route path='/page1'>\r\n            <Page1 />\r\n          </Route>\r\n          <Route path='/page2'>\r\n            <Page2 />\r\n          </Route>\r\n          <Route path='/'>\r\n            <HomePage />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}